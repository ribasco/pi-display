name: Release Deployment

on:
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release
  LD_LIBRARY_PATH: /usr/lib/llvm-9/lib
  JAVA_VERSION: '11'
  JAVA_DIST: 'adopt'

jobs:
  release-project:
    name: 'Build and Release'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}
          check-latest: true

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_branch

      - name: Output branch name
        run: echo ${{ steps.extract_branch.outputs.branch }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.16.x'

      - name: Use cmake
        run: cmake --version

      - name: Add LLVM gpg key
        run: wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

      - name: Add LLVM toolchain to sources.list.d
        run: echo 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-9 main' | sudo tee -a /etc/apt/sources.list.d/llvm.list

      - name: Add ubuntu toolchain ppa
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test

      - name: Update the package cache
        run: sudo apt-get update

      - name: Install required packages
        run: sudo apt-get install gnupg2 mingw-w64 autoconf-archive llvm-9 llvm-9-dev clang-9 gcc-7 g++-7 gcc-multilib g++-multilib libssl-dev

      - name: Add clang-9 path to /usr/local/bin
        run: sudo ln -s /usr/bin/clang-9 /usr/local/bin/clang && sudo ln -s /usr/bin/clang++-9 /usr/local/bin/clang++

      - name: Install third-party dependencies
        run: scripts/install-deps-bin.sh

      - name: Build Project (Java + Native)
        run: mvn install -P'release' -Dchangelist= -Dcompile.native=true -Dgraphics.target=native-build-cc-all -Dinput.target=native-build-cc-all -Dbuild.type=${BUILD_TYPE} -Dlicense.skipUpdateLicense=true -DskipTests=true -B -V

      - name: Set up for Sonatype
        uses: actions/setup-java@v2
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: SONATYPE_USERNAME # env variable for username in deploy
          server-password: SONATYPE_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.GPG_AUTHOR_PRIVATEKEY }} # Value of the GPG private key to import
          gpg-passphrase: GPG_AUTHOR_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Sonatype (Staging)
        run: mvn --batch-mode deploy -P'deploy-sonatype,release' -Dchangelist= -Dmaven.antrun.skip=true -DskipTests=true -Dlicense.skipUpdateLicense=true
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_AUTHOR_PASSPHRASE: ${{ secrets.GPG_AUTHOR_PASSPHRASE }}

      - name: Set up for GitHub Packages
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}

      - name: Publish to GitHub Packages
        run: mvn --batch-mode deploy -P'deploy-github,release' -Dchangelist= -Dmaven.antrun.skip=true -DskipTests=true -Dlicense.skipUpdateLicense=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
