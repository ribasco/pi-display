# Note: Upgrading to 20.04+ will not have libssl1.0-dev in the official repositories. Build will fail as a result.

name: CI / Testing / Deployment

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    tags:
      - '!refs/tags/*'
    paths-ignore:
      - '**/README.md'
      - '**/.github/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
      - '**/.github/**'

env:
  BUILD_TYPE: Debug
  LD_LIBRARY_PATH: /usr/lib/llvm-9/lib
  JAVA_DIST: 'adopt'
  JAVA_VERSION: '11'

jobs:
  build-project:
    name: 'Cross-Compile Build (All)'
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        java: [ '11' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Java JDK
        uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }} # ${{ matrix.java }}
          check-latest: true

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Output branch name
        run: echo ${{ steps.extract_branch.outputs.branch }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.16.x'

      - name: Output CMake version
        run: cmake --version

      - name: Add LLVM gpg key
        run: wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

      - name: Add LLVM toolchain to sources.list.d
        run: echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main' | sudo tee -a /etc/apt/sources.list.d/llvm.list

      - name: Add ubuntu toolchain ppa
        run: sudo add-apt-repository -n ppa:ubuntu-toolchain-r/test

      - name: Update the package cache
        run: sudo apt-get update || true

      - name: Install required packages
        run: sudo apt-get install gnupg2 mingw-w64 autoconf-archive llvm-9 llvm-9-dev clang-9 gcc-7 g++-7 gcc-multilib g++-multilib libssl1.0-dev

      - name: Add clang-9 path to /usr/local/bin
        run: sudo ln -s /usr/bin/clang-9 /usr/local/bin/clang && sudo ln -s /usr/bin/clang++-9 /usr/local/bin/clang++

      - name: Install third-party dependencies
        run: scripts/install-deps-bin.sh

      - name: Build Project (Java + Native)
        run: mvn install -Dcompile.native=true -Dgraphics.target=native-build-cc-all -Dinput.target=native-build-cc-all -Dbuild.type=${BUILD_TYPE} -Dlicense.skipUpdateLicense=true -DskipTests=true -Dmaven.javadoc.skip=true -B -V

      - name: Unit Tests
        run: mvn test

      - name: Integration Tests
        run: mvn verify

      - name: Set up for Sonatype
        uses: actions/setup-java@v2
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: SONATYPE_USERNAME # env variable for username in deploy
          server-password: SONATYPE_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.GPG_AUTHOR_PRIVATEKEY }} # Value of the GPG private key to import
          gpg-passphrase: GPG_AUTHOR_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Sonatype (Snapshots)
        if: github.event_name != 'pull_request' && github.event_name != 'release'
        run: mvn --batch-mode deploy -P'deploy-sonatype,release' -Dmaven.antrun.skip=true -DskipTests=true -Dlicense.skipUpdateLicense=true -Dmaven.javadoc.skip=true
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_AUTHOR_PASSPHRASE: ${{ secrets.GPG_AUTHOR_PASSPHRASE }}
