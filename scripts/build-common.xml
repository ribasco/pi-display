<!--
  ~ Copyright (C) 2018 Universal Character/Graphics display library
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Lesser Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Lesser Public
  ~ License along with this program.  If not, see
  ~ <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<project name="ucgd-build-common" basedir=".">
    <!--
        =============================================================================
                                         REQUIREMENTS
        =============================================================================
        1. Host machine should be a Linux 64-bit OS (Debian preferred)
        2. Java JDK 11+
        3. Latest Apache ANT version
        4. Latest Apache Maven version

        =============================================================================
                Note: The following properties needs to be defined externally
        =============================================================================
        1. root.dir           - usually passed via command line argument
        2. project.dir.module - the module directory name that belongs to the project
        3. cpp.build.target   - defined from the project specific ant build file
    -->
    <property name="root.dir" value=""/>

    <!-- =========================================================================================== -->
    <!--                            GLOBAL VALIDATION                                                -->
    <!-- =========================================================================================== -->

    <fail message="ERROR: 'root.dir' property should not be empty!!">
        <condition>
            <or>
                <not>
                    <isset property="root.dir"/>
                </not>
                <equals arg1="${root.dir}" arg2=""/>
            </or>
        </condition>
    </fail>

    <fail message="ERROR: 'project.dir.module' property should not be empty!!">
        <condition>
            <or>
                <not>
                    <isset property="project.dir.module"/>
                </not>
                <!--suppress AntResolveInspection -->
                <equals arg1="${project.dir.module}" arg2=""/>
            </or>
        </condition>
    </fail>

    <fail message="ERROR: 'cpp.build.target' property should not be empty!!">
        <condition>
            <or>
                <not>
                    <isset property="cpp.build.target"/>
                </not>
                <!--suppress AntResolveInspection -->
                <equals arg1="${cpp.build.target}" arg2=""/>
            </or>
        </condition>
    </fail>

    <!-- =========================================================================================== -->
    <!--                            GLOBAL PROPERTIES                                                -->
    <!-- =========================================================================================== -->

    <!--suppress AntResolveInspection -->
    <property name="project.dir.root" location="${root.dir}"/>
    <!--suppress AntResolveInspection -->
    <property name="project.dir.base" location="${project.dir.root}/native/modules/${project.dir.module}"/>

    <property name="cmake.module.dir" value="${project.dir.root}/native/cmake"/>
    <property name="cmake.generator.unix" value="-G 'CodeBlocks - Unix Makefiles'"/>
    <property name="cmake.generator.win" value="-G 'CodeBlocks - MinGW Makefiles'"/>

    <!-- Global Toolchain properties -->
    <property name="cpp.tools.win.x86_32.toolchain" value="${cmake.module.dir}/MingWToolchain-32.cmake"/>
    <property name="cpp.tools.win.x86_64.toolchain" value="${cmake.module.dir}/MingWToolchain-64.cmake"/>
    <property name="cpp.tools.osx.x86_32.toolchain" value="${cmake.module.dir}/OSXToolchain-32.cmake"/>
    <property name="cpp.tools.osx.x86_64.toolchain" value="${cmake.module.dir}/OSXToolchain-64.cmake"/>

    <property name="cpp.tools.dir" value="${project.dir.root}/native/tools"/>
    <property name="cpp.tools.rpi.dir" value="${cpp.tools.dir}/rpi-tools"/>
    <property name="cpp.tools.rpi.arm32.toolchain" value="${cmake.module.dir}/RpiToolchain-linux-32.cmake"/>
    <property name="cpp.tools.rpi.arm64.toolchain" value="${cmake.module.dir}/RpiToolchain-linux-64.cmake"/>

    <property name="cpp.tools.osx.dir" value="${cpp.tools.dir}/osxcross"/>
    <property name="cpp.tools.osx.archive" value="osx-tools.tar.gz"/>

    <!-- OSX 32-bit -->
    <property name="cpp.tools.osx32.sdk" value="${cpp.tools.osx.dir}/SDK/MacOSX10.13.sdk"/>
    <property name="cpp.tools.osx32.target" value="darwin17"/>
    <property name="cpp.tools.osx32.host" value="i386-apple-${cpp.tools.osx32.target}"/>

    <!-- OSX 64-bit -->
    <property name="cpp.tools.osx64.sdk" value="${cpp.tools.osx.dir}/SDK/MacOSX10.15.sdk"/>
    <property name="cpp.tools.osx64.target" value="darwin19"/>
    <property name="cpp.tools.osx64.host" value="x86_64-apple-${cpp.tools.osx64.target}"/>

    <!-- Target directory properties for native binaries -->
    <property name="project.dir.target" value="${project.dir.base}/target"/>
    <property name="natives.dir.target" value="${project.dir.target}/classes/META-INF/lib"/>
    <property name="project.target.dir.linux.x86_32" value="${natives.dir.target}/linux_32"/>
    <property name="project.target.dir.linux.x86_64" value="${natives.dir.target}/linux_64"/>
    <property name="project.target.dir.linux.arm32" value="${natives.dir.target}/linux_arm"/>
    <property name="project.target.dir.linux.arm64" value="${natives.dir.target}/linux_arm64"/>
    <property name="project.target.dir.win.x86_32" value="${natives.dir.target}/windows_32"/>
    <property name="project.target.dir.win.x86_64" value="${natives.dir.target}/windows_64"/>
    <property name="project.target.dir.osx.x86_32" value="${natives.dir.target}/osx_32"/>
    <property name="project.target.dir.osx.x86_64" value="${natives.dir.target}/osx_64"/>

    <property name="cpp.proj.dir" value="${project.dir.base}/src/main/cpp"/>
    <property name="cmake.module.dir" value="${project.dir.root}/native/cmake"/>

    <property name="cpp.build.type" value="Release"/>
    <property name="cpp.build.dir" value="${cpp.proj.dir}/build"/>
    <property name="cpp.lib.dir" value="${cpp.proj.dir}/lib"/>

    <!-- OS specific build relative paths -->
    <property name="cpp.build.relpath.linux-x86_32" value="linux/x86_32"/>
    <property name="cpp.build.relpath.linux-x86_64" value="linux/x86_64"/>
    <property name="cpp.build.relpath.linux-arm32" value="linux/arm_32"/>
    <property name="cpp.build.relpath.linux-arm64" value="linux/arm_64"/>
    <property name="cpp.build.relpath.windows-x86_32" value="windows/x86_32"/>
    <property name="cpp.build.relpath.windows-x86_64" value="windows/x86_64"/>
    <property name="cpp.build.relpath.osx-x86_32" value="osx/x86_32"/>
    <property name="cpp.build.relpath.osx-x86_64" value="osx/x86_64"/>

    <!--suppress AntResolveInspection -->
    <property name="cpp.build.output.linux" value="lib${cpp.build.target}.so"/>
    <!--suppress AntResolveInspection -->
    <property name="cpp.build.output.mac" value="lib${cpp.build.target}.dylib"/>
    <!--suppress AntResolveInspection -->
    <property name="cpp.build.output.win" value="${cpp.build.target}.dll"/>

    <!-- =========================================================================================== -->
    <!--                            MISC                                                             -->
    <!-- =========================================================================================== -->
    <!-- Cleanup operations -->
    <target name="cleanup">
        <echo message="Cleaning up build, lib and target directories"/>
        <delete dir="${cpp.build.dir}"/>
        <delete dir="${cpp.lib.dir}"/>
        <delete dir="${project.dir.target}"/>
    </target>

    <target name="cmake-clean">
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--build ${cpp.proj.dir}/build/${relpath}"/>
            <arg line="--target clean --"/>
            <arg line=" -j 4"/>
        </exec>
    </target>

    <target name="show-prop-info">
        <echo message="=============================================================="/>
        <echo message="Build Properties"/>
        <echo message="=============================================================="/>
        <echo message="OS Name        : ${os.name}"/>
        <echo message="OS Architecture: ${os.arch}"/>
        <echo message="OS Version     : ${os.version}"/>
        <echo message=" "/>
        <echoproperties format="text">
            <propertyset>
                <propertyref prefix="root."/>
                <propertyref prefix="main."/>
                <propertyref prefix="project."/>
                <propertyref prefix="cpp."/>
                <propertyref prefix="cmake."/>
            </propertyset>
        </echoproperties>
        <echo message="=============================================================="/>
    </target>

    <!-- =========================================================================================== -->
    <!--                            GENERATE SOURCES                                                 -->
    <!-- =========================================================================================== -->

    <target name="generate-native-sources-all" depends="generate-native-sources-win, generate-native-sources-osx, generate-native-sources-linux-arm, generate-native-sources-linux-x86">
        <echo>Generating native source directories to ${project.basedir}</echo>
    </target>

    <!-- Generate windows sources -->
    <target name="generate-native-sources-win">
        <mkdir dir="${project.target.dir.win.x86_32}"/>
        <mkdir dir="${project.target.dir.win.x86_64}"/>
    </target>

    <!-- Generate linux arm sources -->
    <target name="generate-native-sources-linux-arm">
        <mkdir dir="${project.target.dir.linux.arm32}"/>
        <mkdir dir="${project.target.dir.linux.arm64}"/>
    </target>

    <!-- Generate native linux sources -->
    <target name="generate-native-sources-linux-x86">
        <mkdir dir="${project.target.dir.linux.x86_32}"/>
        <mkdir dir="${project.target.dir.linux.x86_64}"/>
    </target>

    <!-- Generate native osx sources -->
    <target name="generate-native-sources-osx">
        <mkdir dir="${project.target.dir.osx.x86_32}"/>
        <mkdir dir="${project.target.dir.osx.x86_64}"/>
    </target>

    <!-- =========================================================================================== -->
    <!--                            VALIDATE TOOLCHAINS                                              -->
    <!-- =========================================================================================== -->

    <!-- Check validity of all required tools -->
    <target name="tools-check-all" depends="tools-check-osxcross, tools-check-rpi">
        <echo>Checking validity of all required tools for native library build</echo>
    </target>

    <!-- Check if the OSX toolchain directory is valid (contains the required files) -->
    <target name="tools-check-osxcross">
        <condition property="osx.tools.dir.valid">
            <and>
                <available file="${cpp.tools.osx.dir}" type="dir"/>
                <available file="${cpp.tools.osx.dir}/bin" type="dir"/>
                <available file="${cpp.tools.osx.dir}/SDK" type="dir"/>
                <available file="${cpp.tools.osx.dir}/SDK/MacOSX10.13.sdk" type="dir"/>
                <available file="${cpp.tools.osx.dir}/SDK/MacOSX10.14.sdk" type="dir"/>
                <available file="${cpp.tools.osx.dir}/SDK/MacOSX10.15.sdk" type="dir"/>
                <available file="${cpp.tools.osx.dir}/bin/o32-clang" type="file"/>
                <available file="${cpp.tools.osx.dir}/bin/o32-clang++" type="file"/>
                <available file="${cpp.tools.osx.dir}/bin/o64-clang" type="file"/>
                <available file="${cpp.tools.osx.dir}/bin/o64-clang++" type="file"/>
            </and>
        </condition>
    </target>

    <!-- Check if RPI Tools is valid -->
    <target name="tools-check-rpi">
        <condition property="rpi.tools.dir.valid">
            <and>
                <available file="${cpp.tools.rpi.dir}" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/gcc-linaro-arm-linux-gnueabihf-raspbian" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-rpi-linux-gnueabihf-gcc" type="file"/>
                <available file="${cpp.tools.rpi.dir}/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-rpi-linux-gnueabihf-g++" type="file"/>
                <available file="${cpp.tools.rpi.dir}/gcc-linaro-arm-linux-gnueabihf-raspbian-x64" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/aarch64-rpi-linux-gnu-gcc" type="file"/>
                <available file="${cpp.tools.rpi.dir}/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/aarch64-rpi-linux-gnu-g++" type="file"/>
            </and>
        </condition>
    </target>

    <!-- =========================================================================================== -->
    <!--                            INITIALIZE TOOLCHAINS                                            -->
    <!-- =========================================================================================== -->

    <!-- Initialize all toolchains -->
    <target name="init-native-tools-all" depends="init-native-tools-rpi, init-native-tools-osx">
        <echo>Initializing native tools (ALL)</echo>
    </target>

    <!-- Initialize osxcross toolchain -->
    <target name="init-native-tools-osx" depends="tools-check-osxcross" unless="osx.tools.dir.valid">
        <echo>Initializing OSXCross git submodule</echo>
        <exec executable="git" dir="${root.dir}" failonerror="false">
            <arg line="submodule update --init --remote ${cpp.tools.osx.dir}"/>
        </exec>
    </target>

    <!-- Initialize RPi/ARM toolchain -->
    <target name="init-native-tools-rpi" depends="tools-check-rpi" unless="rpi.tools.dir.valid">
        <echo>Initializing RPI tools git submodule</echo>
        <exec executable="git" dir="${root.dir}" failonerror="false">
            <arg line="submodule update --init --remote ${cpp.tools.rpi.dir}"/>
        </exec>
    </target>

    <!-- =========================================================================================== -->
    <!--                            COPY RESOURCES                                                   -->
    <!-- =========================================================================================== -->

    <!-- Copy all resources -->
    <target name="native-copy-resources-all" depends="
    native-copy-resources-linux-x86_32,
    native-copy-resources-linux-x86_64,
    native-copy-resources-linux-arm32,
    native-copy-resources-linux-arm64,
    native-copy-resources-win-x86_32,
    native-copy-resources-win-x86_64,
    native-copy-resources-osx-x86_32,
    native-copy-resources-osx-x86_64">
        <echo>Copying ALL native output to target resource folders</echo>
    </target>

    <!-- Copies the cmake output binaries to their respective target resource location -->
    <target name="native-copy-resources-linux-x86_32">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}/bin/${cpp.build.output.linux}" todir="${project.target.dir.linux.x86_32}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-linux-x86_64">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.linux-x86_64}/bin/${cpp.build.output.linux}" todir="${project.target.dir.linux.x86_64}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-linux-arm32">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.linux-arm32}/bin/${cpp.build.output.linux}" todir="${project.target.dir.linux.arm32}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-linux-arm64">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.linux-arm64}/bin/${cpp.build.output.linux}" todir="${project.target.dir.linux.arm64}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-win-x86_32">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.windows-x86_32}/bin/${cpp.build.output.win}" todir="${project.target.dir.win.x86_32}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-win-x86_64">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.windows-x86_64}/bin/${cpp.build.output.win}" todir="${project.target.dir.win.x86_64}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-osx-x86_32">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.osx-x86_32}/bin/${cpp.build.output.mac}" todir="${project.target.dir.osx.x86_32}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-osx-x86_64">
        <copy file="${cpp.build.dir}/${cpp.build.relpath.osx-x86_64}/bin/${cpp.build.output.mac}" todir="${project.target.dir.osx.x86_64}" failonerror="true"/>
    </target>

    <!-- =========================================================================================== -->
    <!--                            OS CHECKS                                                        -->
    <!-- =========================================================================================== -->

    <!-- Targets for checking os family only -->
    <target name="os-check-linux">
        <condition property="os.linux">
            <os family="unix" name="Linux"/>
        </condition>
    </target>

    <target name="os-check-osx">
        <condition property="os.osx">
            <os family="unix" name="Mac OS X"/>
        </condition>
    </target>

    <target name="os-check-windows">
        <condition property="os.windows">
            <os family="windows"/>
        </condition>
    </target>

    <!-- Targets for checking os family + arch -->
    <target name="os-check-linux-x86_32">
        <condition property="os.linux.x86_32">
            <os family="unix" arch="x86" name="Linux"/>
        </condition>
    </target>

    <target name="os-check-linux-x86_64">
        <condition property="os.linux.x86_64">
            <os family="unix" arch="amd64" name="Linux"/>
        </condition>
    </target>

    <target name="os-check-linux-x86">
        <condition property="os.linux.x86">
            <os family="unix" arch="x86" name="Linux"/>
        </condition>
    </target>

    <target name="os-check-windows-x86_64">
        <condition property="os.windows.x86_64">
            <os family="windows" arch="amd64"/>
        </condition>
    </target>

    <!-- 32bit ARM - Linux -->
    <target name="os-check-linux-arm32">
        <condition property="os.linux.arm32">
            <os family="unix" arch="arm" name="Linux"/>
        </condition>
    </target>

    <!-- 64bit ARM - Linux -->
    <target name="os-check-linux-arm64">
        <condition property="os.linux.arm64">
            <os family="unix" arch="aarch64" name="Linux"/>
        </condition>
    </target>

    <!-- 32bit x86 - OSX -->
    <target name="os-check-osx-x86_32">
        <condition property="os.macosx.x86_32">
            <os family="unix" arch="x86" name="Mac OS X"/>
        </condition>
    </target>

    <!-- 64bit x86 - OSX -->
    <target name="os-check-osx-x86_64">
        <condition property="os.osx.x86_64">
            <os family="unix" arch="x86_64" name="Mac OS X"/>
        </condition>
    </target>
</project>
